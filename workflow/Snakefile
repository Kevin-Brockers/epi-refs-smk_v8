# Import packages
import os
from pathlib import Path
import pandas as pd

# Load config file
configfile: 'config/config.yml'

# Sample_manifest
SAMPLE_MANIFEST_PATH = config['SAMPLE_MANIFEST']

# Specify common file paths
RESULTS_DIR = Path(config['RESULTS_DIR'])
FIGURE_DIR = Path(config['FIGURE_DIR'])
REPORT_DIR = Path(config['REPORT_DIR'])
EXTERNAL_DATA_DIR = Path(config['EXTERNAL_DATA_DIR'])
METHOD_DIR = Path(config['METHOD_DIR'])
FASTQ_DIR = Path(config['FASTQ_DIR'])
INDEX_DIR = Path(config['INDEX_DIR'])
BAM_DIR = Path(config['BAM_DIR'])
RESOURCES_DIR = Path(config['RESOURCES_DIR'])
QUALITY_CONTROL_DIR = Path(config['QUALITY_CONTROL_DIR'])
LOG_DIR = Path(config['LOG_DIR'])
TEMP_DIR = Path(config['TEMP_DIR'])

# Include general rules
include: 'rules/load_sample_manifest.smk'
include: 'rules/input_functions.smk'
include: 'rules/get_rule_params.smk'
include: 'rules/targets_functions.smk'

# Include workflow specific rules
include: 'rules/get_fastqs/sra_tools.smk'
include: 'rules/alignment/trim_galore.smk'
include: 'rules/alignment/get_ref_genome.smk'
include: 'rules/alignment/build_bowtie2_index.smk'
include: 'rules/alignment/alignment_bowtie2.smk'
include: 'rules/alignment/deduplicate_reads.smk'

# Count reads in bins
include: 'rules/count_reads_in_bins/compute_chromsizes.smk'
include: 'rules/count_reads_in_bins/blacklist.smk'
include: 'rules/count_reads_in_bins/make_genomic_windows.smk'
include: 'rules/count_reads_in_bins/featurecounts.smk'

# Compute bedgraphs
include: 'rules/compute_bedgraphs/compute_log2fc_bedgraphs_cpm.smk'
include: 'rules/compute_bedgraphs/compute_means_and_zscores.smk'
# QC
rule rule multiqc:
    input:
        targets()
    output:
        file_path = str(REPORT_DIR / 'multiqc' / 'multiqc_report.html'),
        base = directory(str(REPORT_DIR / 'multiqc'))
    log:
        str(LOG_DIR / 'multiqc' / 'multiqc.log')
    threads:
        1
    conda:
        "envs/multiqc.yml"
    resources:
        mem_mb = 16000
    shell:
        """
        multiqc \
            --force \
            --interactive \
            -o {output.base} \
            -n multiqc_report.html \
            resources/ \
            results/ \
            temp_data/ \
            logs/ \
            &> {log}
        """

rule all_targets:
    input:
        rules.multiqc.output,
        targets()
    default_target:True